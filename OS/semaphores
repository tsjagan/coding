- synchronized counting variables


class Semaphore {
    public:
        Semaphore (max ) : count_(max) { }
        P () {
            while ( true ) {
                while ( test_and_set(lock) == LOCKED );
                if ( count_ > 0 ) {
                    count_--;
                    lock = UNLOCKED;
                    break;
                } else {
                    // add to queue
                    lock_ = UNLOCKED;
                    // put to sleep
                }
             }
        }
        V () {
            while ( test_and_set(lock) == LOCKED );
            count_++;
            wake up if queue not empty
            lock = UNLOCKED;
        }
    private:
        static const int UNLOCKED = 0;
        static const int LOCKED = 1;
        int lock_ = UNLOCKED;
        uint32_t count_;
};

class Semaphore {
  public:
    Semaphore(max) : count_(max) { }
    P() {
      // want to wait till count becomes non-zero
      lock.acquire()
      while ( count_ == 0 ) {
        cond_var.wait(lock);
      }
      count_--;
      lock.release();
    }

    V() {
      lock.acquire();
      count++;
      cond_var.signal();
      lock.release();
    }
  private:
    lock;
    ConditionVar cond;
    int count_;
};
